{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Calibri;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\hyphpar0\widctlpar\sa160\sl252\slmult1\f0\fs22 package pdfForms;\par
import io.restassured. RestAssured; \par
import io.restassured.http.Header;\par
import io.restassured.path.json.JsonPath;\par
import io.restassured.response.Response; \par
import io.restassured.specification.RequestSpecification;\par
import org.apache.pdfbox.exceptions.COSVisitorException;\par
import org.apache.pdfbox.pdmodel. PDDocument;\par
import org.apache.pdfbox.util.PDFTextStripper; \par
import org.apache.poi.openxm14j.exceptions.InvalidFormatException;\par
import org.apache.poi.ss.usermodel.Cell;\par
import org.apache.poi.ss.usermodel.CellStyle; \par
import org.apache.poi.ss.usermodel.DateUtil;\par
import org.apache.poi.ss.usermodel. IndexedColors;\par
import org.apache.poi.ss.usermodel.Row;\par
import org.apache.poi.ss.usermodel.Sheet;\par
import org.apache.poi.xssf.usermodel.XSSFSheet;\par
import org.apache.poi.xssf.usermodel.XSSFWorkbook;\par
\par
import java.io.File;\par
import java.io.FileInputStream; \par
import java.io.FileNotFoundException;\par
import java.io.FileOutputStream;\par
import java.io.IOException; \par
import java.text.DateFormat;\par
import java.text.ParseException;\par
import java.text.SimpleDateFormat;\par
import java.util.ArrayList;\par
import java.util.Date;\par
import java.util.Iterator;\par
\par
public class PDFValidationBase extends PDFTextStripper \{\par

\pard\hyphpar0\widctlpar\li720\sa160\sl252\slmult1 public static String srcPDFPath;\par
public static String memberAuthToken;\par
public static String member GUID;\par
public static JsonPath memberData;\par
public static JsonPath memberAddressData;\par
\par

\pard\hyphpar0\widctlpar\sa160\sl252\slmult1\tab HTML_Report html = new HTML_Report();\par
\tab enum MEMBERDATA\par
\tab\{\par
\tab DOB, FIRSTNAME, LASTNAME, FULLNAME, ADDRESS, CITY, STATE, ZIP, GENDER, SSN, CITIZENSHIP, PRIMARYADDRESS, ADDRESSCITY, ADDRESSSTATE, ADDRESSZIP\par
\tab\}\par

\pard\hyphpar0\widctlpar\li720\sa160\sl252\slmult1 public static String dobCCAPI = null;\par
public static String firstNameCCAPI = null;\par
public static String lastNameCCAPI = null;\par
public static String fullNameCCAPI= null;\par
public static String addressCCAPI= null; \par
public static String cityCCAPI = null;\par
public static String stateCCAPI = null;\par
public static String zipCCAPI= null;\par
public static String genderCCAPI = null;\par
public static String ssnCCAPI = null;\par
public static String citizenshipCCAPI = null; .\par
public static String pryAddressCCAPI= null;\par
public static String addressCityCCAPI = null;\par
public static String addressStateCCAPI = null;\par
 public static String addressZipCCAPI = null;\par

\pard\hyphpar0\widctlpar\sa160\sl252\slmult1\par
enum ADDRESSDATA\par
\{\par
\tab COUNTRY, STATE, CITY, POSTALCODE, ADDRESSLINEONE, ADDRESSLINETWO, FULLADDRESS\par
\}\par
public PDFValidationBase() throws IOException \{\par
\tab super();\par
\}\par
/**\par
* This method for the type of data in the cell, extracts the data and\par
* returns it as a string.\par
*/\par
public static String getCellValueAsString (Cell cell) \{\par
\tab String strCellValue = null;\par
\tab if (cell != null) \{\par
\tab switch (cell.getCellType()) \{ \par
\tab case Cell.CELL_TYPE_STRING:\par
\tab strCellValue = cell.toString();\par
\tab break;\par

\pard\hyphpar0\widctlpar\li720\sa160\sl252\slmult1 case Cell.CELL_TYPE_NUMERIC:\par
if (DateUtil.isCellDateFormatted (cell)) \{\par
SimpleDateFormat dateFormat= new SimpleDateFormat( "dd/MM/yyyy");\par

\pard\hyphpar0\widctlpar\sa160\sl252\slmult1\tab strCellValue = dateFormat.format(cell.getDateCellValue());\par
\tab\} else \{\par

\pard\hyphpar0\widctlpar\li720\sa160\sl252\slmult1 Double value = cell.getNumericCellValue(); \par
Long longValue = value.longValue(); \par
strCellValue = new String(longValue.toString());\par

\pard\hyphpar0\widctlpar\sa160\sl252\slmult1\}\par
break;\par
case Cell.CELL_TYPE_BOOLEAN:\par
 strCellValue = new String(new Boolean( cell.getBooleanCellValue()).toString());\par
break;\par
case Cell.CELL_TYPE_BLANK:\par
strCellValue = "";\par
break;\par
\}\par
\}\par
return strCellValue;\par
\}\par
//** To retrieve validation data from input data sheet \par
public String getDataByColNameOfTC (Sheet excelSheet, String tcName, String colName) \{\par
String colValue = null;\par
try \{\par
Iterator<Row> iterator = excelSheet.iterator(); \par
Row titleRow= excelSheet.getRow(0);\par
Row currentRow =null;\par
//** iterating the title row \par
iterator.next();\par
while (iterator.hasNext()) \{\par
\tab current Row = iterator.next();\par
\tab if (getCellValueAsString(currentRow.getCell (0)).equalsIgnoreCase(tcName))\{\par
\tab\tab break;\par
\tab\}\par
\}\par
for (int i=0; i<titleRow.getLastCellNum(); i++)\{\par
      if (titleRow.getCell(i)!=null)\{\par
      if(getCellValueAsString(titleRow.getCell(i)).equalsIgnoreCase (colName))\{ \par
if(currentRow.getCell(i)!=null)\{\par
colValue= getCellValueAsString(currentRow.getCell(i));\par
\}\par
break;\par
\}\par
\}\par
\}\par
\} catch (Exception e) \{\par
//throw new Exception("Error reading data from excel ", e);\par
\}\par
return colValue;\par
\}\par
//** To write test results\par
\par
public void writeTestResults (String sDidNo, String skeyword, String sExpectedVal, String sPageNo, String result) \{ \par
try\{\par
String date = new SimpleDateFormat ("yyyy.MM.dd"). format (new Date()); \par
String outputFolderPath = "C:\\\\PDF_Automation Reports\\\\";\par
File dir= new File(outputFolderPath); \par
//** check whether directory exists.\par
if(!dir.exists())\{\par
dir.mkdir();\par
\}\par
File fileName = new File(outputFolderPath +date+"_"+"PDF_Validation_Test_Results.xlsx"); \par
XSSFSheet sheet = null; \par
XSSFWorkbook workbook = null;\par
FileOutputStream fos = null; \par
FileInputStream fis =null; \par
if(lfileName.exists()) \{\par
try \{\par
\par
fileName.createNewFile(); \par
fos = new FileOutputStream(fileName); \par
workbook = new XSSFWorkbook(); \par
sheet = workbook.createSheet("output");\par
\} catch (IOException e) \{\par
\}\par
\}else\{\par
fis= new FileInputStream(fileName); \par
workbook = new XSSFWorkbook (fis); \par
sheet workbook.getSheet("output");\par
\}\par
//** To identify the empty row to be updated/inserted \par
int rowCount = sheet.getLastRowNum();\par
int rowNo= rowCount+1;\par
//** Create the new row \par
sheet.createRow(rowNo);\par
//** Create columns and enter values\par
sheet.getRow(rowNo).createCell(0);\par
 sheet.getRow(rowNo).getCell(0).setCellValue(sDidNo);\par
sheet.getRow(rowNo).createCell(1); \par
sheet.getRow(rowNo).getCell(1).setCellValue(sExpectedVal);\par
sheet.getRow(rowNo).createCell(2); \par
sheet.getRow(rowNo).getCell(2).setCellValue(sKeyword);\par
sheet.getRow(rowNo).createCell(3); \par
sheet.getRow(rowNo).getCell(3).setCellValue(sPageNo);\par
if (result.toUpperCase()=="PASS")\{\par
CellStyle style = workbook.createCellStyle(); \par
style.setFillForegroundColor(IndexedColors.GREEN.getIndex()); \par
sheet.getRow(rowNo).createCell(4); \par
sheet.getRow(rowNo).getCell(4).setCellValue(result); \par
sheet.getRow(rowNo).getCell(4).setCellStyle(style);\par
\}else\{\par
CellStyle style = workbook.createCellStyle(); \par
style.setFillForegroundColor(IndexedColors.RED.getIndex()); \par
sheet.getRow(rowNo).createCell(4); \par
sheet.getRow(rowNo).getCell(4).setCellValue(result); \par
sheet.getRow(rowNo).getCell(4).setCellStyle(style);\par
\}\par
//** Close the file\par
FileOutputStream outFile =new FileOutputStream(fileName); \par
workbook.write(outFile); \par
outFile.close();\par
\} catch (FileNotFoundException e) \{\par
e.printStackTrace();\par
\} catch (IOException e) \{ \par
e.printStackTrace();\par
\}\par
\}\par
public ArrayList<String>  findingPageNo (String skeyWord, String sPDFName) throws COSVisitorException, IOException, InvalidFormat Exception \{\par
ArrayList<String> pageno = new ArrayList<String>();\par
try \{\par
pageno.clear();\par
PDDocument document PDDocument.load(new File(srcPDFPath));\par
PDFValidationBase textStripper = new PDFValidationBase(); \par
for (int page = 1; page <= document.getNumberOfPages(); page++) \{\par
textStripper.setStartPage(page);\par
textStripper.setEndPage(page);\par
String pdfFileText = textStripper.getText (document);\par
String lines[] = pdfFileText.split("\\\\n");\par
 for (int line = 0; line < lines.length; line++) \{\par
if (lines [line].toUpperCase().replace(" ", "").contains (sKeyword)) \{\par
pageno.add(page + "");\par
\}\par
\}\par
\}\par
\} catch (Exception e) \{\par
 e.printStackTrace();\par
\}\par
return pageno;\par
/**\par
* @param sDidNo - Mandatory\par
* @param skeyword - Mandatory\par
* @param sExpectedVal - Mandatory\par
* @param sLine - Mandatory\par
* @param sPageNo - Optional to provide exact Did page number to be validated or it will traverser across the whole DID pages \par
*@param sSection - Optional to provide start and end key word\par
*@throws COSVisitorException\par
*@throws IOException\par
*@throws InvalidFormat Exception\par
public void PDFValidation (String sDidNo, String skeyword, String sExpectedVal, String sLine, String sPageNo, String sSection) throws COSVisitorException, IOException, InvalidFormatException \{\par
skeyword = skeyword.toUpperCase().replace(" ", ""); \par
sExpectedVal = sExpectedVall=null? sExpectedVal.toUpperCase().replace(" ", ""): "N/A"; sSection=sSection.toUpperCase().replace(" ", "");\par
int arrLen, startPageNo=0, endPageNo=0;\par
int passCount = 0;\par
int page = 0;\par
int line = 0;\par
int startline=-1;\par
int endLine=-1;\par
int startIndex = 0;\par
int endIndex = 0;\par
//** Optional to provide exact Did page number to be validated or it will traverser across the whole DID pages \par
ArrayList<String> pages = new ArrayList<String>();\par
PDDocument pdfDocument = null;\par
if(sPageNo== "" || sPageNo== null) \{ \par
pdfDocument = PDDocument.load(new File(srcPDFPath));\par
 for (int allPage = 1; allPage <= pdfDocument.getNumberOfPages(); allPage++) \{ \par
pages.add(allPage+"");\par
\} \par
\} else \{\par
pages = findingPageNo (sDidNo, "");\par
\}\par
if(pages == null || pages.size() < 1)\par
\{\par
System.out.println(" Skipping PDFValidation as findingPageNo function failed returned NULL..."); \par
return;\par
\}\par
if (sPageNo != "")\{\par
startPageNo= Integer.parseInt(pages.get (Integer.parseInt(sPageNo)-1)); \par
endPageNo= Integer.parseInt(pages.get (Integer.parseInt(sPageNo)-1));\par
\}else\{\par
arrLen= pdfDocument.getNumberOfPages();\par
startPageNo= Integer.parseInt(pages.get (0));\par
 endPageNo= Integer.parseInt(pages.get (arrLen-1));\par
\}\par
if(null if(null != pdfDocument) \{\par
pdfDocument.close();\par
\}\par
//** Validating between start and end section\par
if (sSection!="")\{\par
//** Given section keywords\par
String sStartKeyWord=sSection.split("#")[0].toUpperCase().replace(" ", ""); \par
String sEndKeyword=sSection.split("#") [1].toUpperCase().replace(" ", "");\par
PDDocument sectionDocument = PDDocument.load(new File(srcPDFPath)); \par
PDFValidationBase sectionTextStripper = new PDFValidationBase();\par
for (page= startPageNo; page <= endPageNo; page++) \{\par
sectionTextStripper.setStartPage(page);\par
sectionTextStripper.setEndPage(page);\par
String pdfFileText = sectionTextStripper.getText(sectionDocument); \par
// split by line.\par
String lines[] = pdfFileText.split("\\\\n");\par
for (line 0; line< lines.length; line++) \{\par
if (lines[line].toUpperCase().replace(" ", "").contains (sStartKeyWord)) \{\par
 startLine-line;\par
\} if (lines [line].toUpperCase().replace(" ", "").contains (sEndKeyword)) \{ \par
endLine-line;\par
\}\par
if (startline 1=-1 && endLine I=-1)\{\par
break;\par
\}\par
\}\par
\}\par
sectionDocument.close();\par
\}\par
try \{\par
//** Converting the entire PDF into Text \par
PDDocument document =  PDDocument.load(new File(srcPDFPath)); \par
PDFValidationBase textStripper = new PDFValidationBase();\par
// Looping through only the pages where DidNo/Keyword appears \par
for (page= startPageNo; page <= endPageNo; page++) \{\par
textStripper.setStartPage(page); \par
textStripper.setEndPage(page); \par
String pdfFileText = textStripper.getText (document); \par
// split by line \par
String lines[] = pdfFileText.split("\\\\n");\par
if (startline !=-1 && endLine !=-1)\{ \par
startIndex = startLine;\par
endIndex = endLine;\par
\}else\{\par
startIndex = 0;\par
endIndex = lines.length;\par
\}\par
outerloop:\par
for (line startIndex; line < endIndex; line++) \{\par
String SearchString = sExpectedVal.toString().replace(" ", "").toUpperCase(); \par
if (sLine.equalsIgnoreCase("Next")) \{\par
if (lines[line].toUpperCase().replace(" ", "").contains (skeyword)) \{ \par
if (lines[line + 1].toUpperCase().replace(" ", "").contains (SearchString)) \{\par
passCount = passCount +1 ;\par
break outerloop;\par
\} else \{\par
\}\par
\}\par
\} else if (sLine.equalsIgnoreCase("Previous")) \{ \par
if (lines[line].toUpperCase().replace(" ", "").contains (sKeyword)) \{ \par
if (lines [line 1].toUpperCase().replace(" ", "").contains (SearchString)) \{\par
passCount = passCount +1;\par
break outerloop; \par
\} else \{\par
//System.out.println("Inside Fail");\par
//System.out.println(String.format("Page: %s, Line: %s, Text: %s", page, line, lines[line]));\par
\}\par
\}\par
\} else if (sLine.equalsIgnoreCase ("Same")) \{\par
if (lines [line].toUpperCase().replace(" ", "").contains (skeyword)) \{\par
 if (lines [line].toUpperCase().replace(" ", "").contains (SearchString)) \{\par
passCount = passCount +1 ;\par
break outerloop;\par
\}\par
\} else \{\par
\} else \{\par
int value = Intege .parseInt(sLine);\par
if (lines[line].toUpperCase().replace(" ", "").contains (skeyword)) \{ \par
String lineValue = lines [line+value].toUpperCase().replace(" ", "").replaceAll("\\\\s", "");\par
 if (SearchString.contains (lineValue)) \{\par
passCount = passCount +1;\par
break outerloop;\par
\}\par
\par
if (lineValue.contains (SearchString)) \{\par
 passCount = passCount +1;\par
 break outerloop;\par
\}\par
\}else \{\par
\}\par
\}\par
\}\par
//** Validating. PASS or FAIL\par
 if(passCount > 0) \{\par
html.writeToHTML (sDidNo, sExpectedVal, skeyword, sPageNo, "PASS"); \par
System.out.println(" Test Results >>>>>>>>>>> PASS >>> PassCount: "+passCount); \par
writeTestResults (sDidNo, skeyword, sExpectedVal, sPageNo, "PASS");\par
\}else\{\par
System.out.println(" Test Results >>>>>>>>>>>FAIL >>> PassCount: " + passCount); \par
html.writeToHTML (sDidNo, sExpectedVal, skeyword, sPageNo, "FAIL");\par
 writeTestResults (sDidNo, sKeyword, sExpectedVal, sPageNo, "FAIL");\par
\}\par
\} catch (Exception e) \{ \par
\} finally \{\par
if(null != document) \{\par
document.close();\par
\}\par
\}\par
\}\par
public void PDFValidationCA(String sDidNo, String skeyword, String sExpectedVal, String sLine, String sPageNo, String sSection) throws COSVisitorException, IOException, InvalidFormatException \{\par
skeyword = skeyword.toUpperCase().replace(" ", ""); \par
sExpectedVal= sExpectedVal.toUpperCase().replace(" ", ""); \par
sSection= sSection.toUpperCase().replace(" ", "");\par
int arrLen, startPageNo=0, endPageNo=0;\par
int passCount = 0;\par
int page = 0;\par
int line = 0;\par
int startLine=-1;\par
int endline=-1;\par
int startIndex = 0;\par
int endIndex = 0;\par
//** Optional to provide exact Did page number to be validated or it will traverser across the whole DID pages\par
if (sPageNo != "")\{\par
startPageNo= Integer.parseInt(findingPageNo (sDidNo, "").get (Integer.parseInt(sPageNo)-1)); \par
endPageNo= Integer.parseInt(findingPageNo(sDidNo, "").get (Integer.parseInt(sPageNo)-1));\par
\}else\{\par
arrlen = findingPageNo (sDidNo, "").size(); \par
startPageNo= Integer.parseInt(findingPageNo(sDidNo, "").get (0)); \par
endPageNo= Integer.parseInt(findingPageNo(sDidNo, "").get (arrLen-1));\par
\}\par
//** Validating between start and end section\par
if (sSection!="")\{\par
//** Given section keywords\par
String sStartKeyWord=sSection.split("#")[0].toUpperCase().replace(" ", ""); \par
String sEndKeyword=sSection.split("#")[1].toUpperCase().replace(" ", "");\par
PDDocument sectionDocument = PDDocument.load(new File(srcPDFPath));\par
PDFValidationBase sectionTextStripper = new PDFValidationBase();\par
for (page startPageNo; page <= endPageNo; page++) \{\par
sectionText Stripper.setStartPage(page); \par
sectionTextStripper.setEndPage(page);\par
String pdfFileText = sectionTextStripper.getText (sectionDocument);\par
// split by line\par
 String lines[] = pdfFileText.split("\\\\n");\par
for (line 0; line < lines.length; line++) \{\par
if (lines [line].toUpperCase().replace(" ", "").contains (sStartKeyword)) \{ \par
startline=line;\par
 \}\par
if (lines[line].toUpperCase().replace(" ", "").contains (sEndKeyword)) \{ \par
endLine=line;\par
\} if (startline !=-1 && endLine !=-1)\{\par
break;\par
\}\par
\}\par
\} \par
\}\par
try \{\par
//** Converting the entire PDF into Text \par
PDDocument document = PDDocument.load(new File(srcPDFPath)); \par
PDFValidationBase textStripper = new PDFValidationBase();\par
//** Looping through only the pages where DidNo/Keyword appears\par
for (page= startPageNo; page <= endPageNo; page++) \{ \par
textStripper.setStartPage(page); \par
textStripper.setEndPage(page); \par
String pdfFileText = textStripper.getText (document); \par
System.out.println("PDF Vlaue "+ pdfFileText);\par
 // split by line. \par
String lines[] = pdfFileText.split("\\\\n");\par
if (startLine |=-1 && endLine !=-1)\{ \par
startIndex = startLine; \par
endIndex = endLine;\par
\}else\{\par
startIndex = 0; \par
endIndex = lines.length;\par
\}\par
outerloop:\par
for (line startIndex; line < endIndex; line++) \{\par
String SearchString = sExpectedVal.toString().replace("","").toUpperCase(); \par
System.out.println("*-*-*-*-*-*-*-*-skeyword "+sKeyword); \par
System.out.println("*-*-*-*-*-*-*-*-SearchString "+SearchString);\par
if (sLine.equalsIgnoreCase("Next")) \{\par
if (lines[line].toUpperCase().replace(" ", "").contains (skeyword)) \{ \par
if (lines[line + 1].toUpperCase().replace(" ", "").contains (SearchString)) \{ \par
System.out.println("Inside Pass - Next");\par
passCount = passCount +1;\par
break outerloop;\par
\} else \{\par
//System.out.println("Inside Fail");\par
//System.out.println(String.format("Page: %s, Line: %s, Text: %s", page, line, lines [line]));\par
\}\par
\}\par
\}else if (sLine.equalsIgnoreCase("Previous")) \{ \par
if (lines[line].toUpperCase().replace("", "").contains (skeyword)) \{\par
if (lines [line 1].toUpperCase().replace(" ", "").contains (SearchString)) \{\par
 System.out.println("Inside Pass - Previous"); \par
passCount = passCount +1;\par
break outerloop;\par
\} else \{\par
\}\par
\}\par
 \} else if (sline.equalsIgnoreCase ("Same")) \{\par
 if (lines[line].toUpperCase().replace(" ", "").contains (skeyword)) \{ \par
if (lines[line].toUpperCase().replace(" ", "").contains (SearchString)) \{ \par
System.out.println("Inside Pass - Same");\par
 passCount = passCount +1;\par
break outerloop;\par
\} else \{\par
\}\par
\} else if (sline.equalsIgnoreCase("Other")) \{\par
 if (lines [line].toUpperCase().replace(" ", "").contains (sKeyword)) \{\par
if (lines[line+2].toUpperCase().replace(" ", "").contains (SearchString)) \{\par
 System.out.println("Inside Pass - Other"); \par
passCount = passCount +1;\par
break outerloop;\par
\}\par
\}else\{\par
\}\par
\}\par
\}\par
\}\par
\par
//** Validating PASS or FAIL \par
if(passCount > 0) \{\par
System.out.println(" Test Results >>>>>>>>>>> PASS >>> PassCount: "+ passCount);\par
writeTestResults (sDidNo, skeyword, sExpectedVal, sPageNo, "PASS");\par
\}else\{\par
System.out.println(" Test Results >>>>>>>>>>>FAIL >>>PassCount: " + passCount);\par
writeTestResults (sDidNo, skeyword, sExpectedVal, sPageNo, "FAIL");\par
\}\par
\} catch (Exception e) \{\par
\}\par
public String retrieveMemberGUID(String memberNumber) \{\par
memberNumber = memberNumber.replace("a", "");\par
RestAssured.baseURI= "{{\field{\*\fldinst{HYPERLINK https://rint-api.usaa.com }}{\fldrslt{https://rint-api.usaa.com\ul0\cf0}}}}\f0\fs22 "; \par
Response guidResponse = RestAssured.given().get("/enterprise/core-customer/id/v1/guid/" + memberNumber+ "-USAA");\par
System.out.println("Retrieve member guid: "+guidResponse.getStatusCode()); \par
return guidResponse.jsonPath().getString("id");\par
\}\par
public void fetchAndAssignCoreCustomerApiData(String memberNumber)\par
\{\par
memberAuthToken= retrieveMemberAuthorization (memberNumber); \par
memberGUID= retrieveMember GUID(memberNumber);\par
retrieveMemberData();\par
dobCCAPI= memberData.get("birthDate");\par
firstNameCCAPI= memberData.get("name.firstName");\par
lastNameCCAPI= memberData.get("name.lastName");\par
fullNameCCAPI= memberData.get("name. formalName");\par
genderCCAPI = memberData.get ("gender"); \par
citizenshipCCAPI = memberData.get("citizenshipLocation");\par
ssnCCAPI= retrieveMemberSSN().get ("formattedSocial SecurityNumber"); \par
System.out.println("Finished retrieving member data.");\par
JsonPath memberAddress = getMemberAddress();\par
while (memberAddress.toString().isEmpty()) \{ \par
System.out.println("Waiting on Address API to complete...");\par
\}\par
pryAddressCCAPI= extractAddressData(memberAddress, ADDRESSDATA. FULLADDRESS); addressCityCCAPI= extractAddressData(member Address, ADDRESSDATA.CITY); addressStateCCAPI= extractAddressData(memberAddress, ADDRESSDATA.STATE); addressZipCCAPI= extractAddressData(memberAddress, ADDRESSDATA.POSTAL CODE);\par
\}\par
public String retrieveCoreCustomerApiData(String memberNumber, MEMBERDATA memData)\par
\{\par
String sValue=""; \par
 switch (memData)\par
\{ \par
case DOB:\par
sValue=dobCCAPI;\par
break;\par
case FIRSTNAME:\par
sValue=firstNameCCAPI;\par
break;\par
case LASTNAME:\par
sValue=lastNameCCAPI;\par
break;\par
case FULLNAME:\par
sValue=fullNameCCAPI;\par
break;\par
case PRIMARYADDRESS:\par
sValue=pryAddressCCAPI;\par
break;\par
case ADDRESSCITY:\par
sValue=addressCityCCAPI;\par
break;\par
case ADDRESSSTATE:\par
sValue=addressStateCCAPI;\par
break;\par
case ADDRESSZIP:\par
sValue=addressZipCCAPI;\par
break;\par
case GENDER:\par
sValue=genderCCAPI;\par
break;\par
case SSN:\par
sValue=ssnCCAPI;\par
break;\par
case CITIZENSHIP:\par
sValue=citizenshipCCAPI;\par
break;\par
\}\par
return sValue;\par
\}\par
public String retrieveMemberAuthorization(String memberNumber)\par
\{\par
memberNumber = memberNumber.replace("a", ""); \par
RestAssured.baseURI= "{{\field{\*\fldinst{HYPERLINK https://wsdevinternal.usaa.com }}{\fldrslt{https://wsdevinternal.usaa.com\ul0\cf0}}}}\f0\fs22 "; \par
RequestSpecification, authBearerRequest = RestAssured.given(); \par
authBearerRequest.header(new Header("Cookie", "tgenv=testlabf")); \par
authBearerRequest.header(new Header("Member Number", memberNumber)); \par
Response authBearer Response = authBearerRequest.get("usaa/oauth/internal/subject/member/" +memberNumber); \par
JsonPath pinAuthjsonPathEvaluator = authBearerResponse.jsonPath(); \par
int authBearerstatusCode=authBearer Response.getStatusCode(); \par
if (authBearerstatusCode 1= 200) \{\par
System.out.println("Error retrieving member auth");\par
\}\par
return pinAuthjsonPathEvaluator.getString("authorization");\par
\}\par
public void retrieveMemberData()\par
\{\par
RestAssured.baseURI="https://rapi.usaa.com";\par
Request Specification member1DetailsRequest = RestAssured.given(); \par
memberlDetailsRequest.header(new Header("Cookie", "tgenv-testlabf"));\par
memberlDetailsRequest.header(new Header("Authorization", memberAuthToken)); \par
Response memberDetailsResponse = memberlDetails Request.get("/enterprise/core-customer/v1/individuals/"+member GUID);\par
 JsonPath guidjsonPathEvaluator = memberDetails Response.jsonPath();\par
 memberData = guidjsonPathEvaluator;\par
\}\par
public JsonPath retrieveMember SSN()\par
\{\par
Response memberDetailsResponse = null; \par
try \{\par
RestAssured.baseURI= "{{\field{\*\fldinst{HYPERLINK https://rapi.usaa.com }}{\fldrslt{https://rapi.usaa.com\ul0\cf0}}}}\f0\fs22 ";\par
Request Specification member1Details Request =  RestAssured.given(); \par
memberlDetailsRequest.header(new Header("Cookie", "tgenv=testlabf"));\par
memberlDetailsRequest.header("Authorization", memberAuthToken)); \par
memberDetails Response = memberlDetailsRequest.get("/enterprise/core-customer/v1/individuals/" +memberGUID+ "/tax-id");\par
\} catch (Exception e) \{\par
System.out.println("Get member ssn failed"+ e);\par
\}\par
return memberDetailsResponse.jsonPath();\par
\}\par
public JsonPath getMemberAddress() \{\par
JsonPath guidJsonPathEvaluator = null;\par
try \{\par
RestAssured.baseURI="https://rapi.usaa.com";\par
Request Specification memberlDetailsRequest = RestAssured.given(); \par
member1Details Request.header(new Header("Cookie", "tgenv=testlabf")); \par
memberlDetails Request.header(new Header("Authorization", memberAuthToken)); \par
Response memberDetailsResponse = memberlDetails Request.get("/enterprise/core-customer/ contact-points/legacy/v1/individuals/"+memberGUID+"/addresses");\par
guidJsonPathEvaluator = memberDetailsResponse.jsonPath();\par
\} catch (Exception e) \{\par
System.out.println("Get address data failed"+ e);\par
\}\par
return guidJsonPathEvaluator;\par
\}\par
public String extractAddressData(JsonPath addressJson, ADDRESSDATA addressData)\par
\{\par
String sValue = null, sAddressLineOne, sAddress LineTwo;\par
switch (addressData)\par
case COUNTRY:\par
sValue addressJson.get("country").toString().replace("[","").replace("]", ""); \par
break;\par
case STATE:\par
 sValue addressJson.get("state Province [0]").toString().replace("[", "").replace("]", "");\par
break;\par
case CITY:\par
sValue= addressJson.get("city[0]").toString().replace("[", "").replace("]", "");\par
break;\par
case POSTALCODE:\par
sValue= addressJson.get("postal Code [0]").toString().replace("[", "").replace("]", "");\par
break;\par
case ADDRESSLINEONE:\par
sValue addressJson.get("addressLines.addressLine[0][0]");\par
break;\par
case ADDRESSLINETWO:\par
sValue address]son.get("addressLines.addressLine[0][1]");\par
break;\par
case FULLADDRESS:\par
sAddressLineOne = addressJson.get ("addressLines.addressLine[0][0]"); \par
sAddressLineTwo = addressJson.get("addressLines.addressLine[0][1]"); \par
sValue = sAddressLineOne+sAddressLine Two;\par
\}\par
return sValue;\par
\}\par
public String changeDateFormatMMDDYYYY(String sDate, String sPattern)\par
\{\par
SimpleDateFormat fromUser = new SimpleDateFormat ("yyyy-MM-dd");\par
SimpleDateFormat myFormat = new SimpleDateFormat (sPattern);\par
String dateMyFormat= null; \par
if(sDate != null)\par
\{\par
try \{\par
Date dateFromUser = fromUser.parse(sDate); // Parse it to the exisitng date pattern and return Date type \par
dateMyFormat= myFormat. format (dateFromUser); // format it to the date pattern you prefer \par
System.out.println(dateMyFormat); // outputs: 2009-05-19\par
\} catch (ParseException e) \{\par
 e.printStackTrace();\par
\}\par
\}\par
return dateMyFormat;\par
\}\par
/**\par
*\par
* @param birthDate\par
* @return\par
* @throws ParseException\par
*/\par
public long calculateAge(String birthDate) throws ParseException \{\par
Date now = new Date();\par
Date date1 = new SimpleDateFormat ("yyyy-MM-dd").parse(birthDate);\par
DateFormat formatter = new SimpleDateFormat ("yyyyMMdd");\par
int d2 = Integer.parseInt(formatter.format (now));\par
int d1= Integer.parseInt(formatter. format (date1));\par
int age = (d2-d1)/10000;\par
return age;\par
\}\par
public String changeToDesiredDateFormat(String sDate, String sCurrentPattern, String sDesiredPattern)\par
 \{\par
SimpleDateFormat fromUser = new SimpleDateFormat(sCurrentPattern); \par
SimpleDateFormat myFormat = new SimpleDateFormat (sDesiredPattern); \par
String dateMyFormat = null;\par
try \{\par
Date dateFromUser = fromUser.parse(sDate); // Parse it to the exisitng date pattern and return Date type\par
dateMyFormat = myFormat. format (dateFromUser); // format it to the date pattern you prefer \par
System.out.println(dateMyFormat); // outputs: 2009-05-19\par
\} catch (ParseException e) \{\par
 e.printStackTrace();\par
\}\par
return dateMyFormat;\par
\}\par
\}\par

\pard\sa200\sl276\slmult1\f1\lang9\par
}
 